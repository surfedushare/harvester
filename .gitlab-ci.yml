# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

image: ubuntu:22.04

variables:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: qwerty
  POSTGRES_HOST_AUTH_METHOD: trust
  APPLICATION_CONTEXT: host
  APPLICATION_MODE: localhost
  POL_POSTGRES_USER: $POSTGRES_USER
  POL_SECRETS_POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  DOCKER_AUTH_CONFIG: "{\"credHelpers\": {\"017973353230.dkr.ecr.eu-central-1.amazonaws.com\": \"ecr-login\"}}"
  AWS_CONTAINER_REGISTRY: 017973353230.dkr.ecr.eu-central-1.amazonaws.com

stages:
  - install
  - lint-and-test
  - build
  - integration-test
  - deploy

cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - venv/
    - portal/node_modules
    - environments/info.json

.tooling-job:
  before_script:
    - apt-get update
    - apt-get install -y nodejs npm gettext libmagic-dev
    - export PATH=$PATH:portal/node_modules/.bin
    - source venv/bin/activate

.docker-job:
  services:
    - name: docker:dind
  before_script:
    - apt-get update
    # General build requirements
    - apt-get install -y ca-certificates curl gnupg lsb-release nodejs npm gettext libmagic-dev software-properties-common postgresql-client wget
    # Install docker repository
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    # Install Chrome repository
    - wget -O- https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor | tee /usr/share/keyrings/google-chrome.gpg
    - echo deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main | tee /etc/apt/sources.list.d/google-chrome.list
    # Propagate added repositories and install actual packages
    - apt-get update
    - apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    - apt-get install -y google-chrome-stable
    # Cypress requirements
    - apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
    # Prepare shell environment
    - source venv/bin/activate
    - export PATH=$PATH:portal/node_modules/.bin
    # Login to AWS container registry
    - aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 322480324822.dkr.ecr.eu-central-1.amazonaws.com

install-job:
  stage: install
  before_script:
    - apt-get update
    - apt-get install -y nodejs npm python3.10-venv libxml2-dev libxslt-dev python3.10-dev
  script:
    - python3 --version
    - python3 -m venv venv --copies --upgrade-deps
    - source venv/bin/activate
    - pip install setuptools==58
    - pip install -r requirements.txt
    - invoke prepare-builds --commit $CI_COMMIT_SHA
    - cd portal
    - npm ci

lint-job:
  stage: lint-and-test
  extends: .tooling-job
  script:
    - flake8 .
    - cd portal
    - npm run lint

service-test-job:
  stage: lint-and-test
  services:
    - name: postgres:12.2-alpine
    - name: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
      alias: elasticsearch
      command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
  extends: .tooling-job
  script:
    - APPLICATION_PROJECT=edusources invoke test.service
    - APPLICATION_PROJECT=nppo invoke test.service

harvester-test-job:
  stage: lint-and-test
  services:
    - name: postgres:12.2-alpine
  extends: .tooling-job
  script:
    - APPLICATION_PROJECT=edusources invoke test.harvester
    - APPLICATION_PROJECT=nppo invoke test.harvester

build-job:
  stage: build
  extends: .docker-job
  script:
    - invoke aws.build harvester --commit $CI_COMMIT_SHA
    - invoke aws.build service --commit $CI_COMMIT_SHA
    - invoke aws.push harvester --commit $CI_COMMIT_SHA
    - invoke aws.push service --commit $CI_COMMIT_SHA

integration-test-job:
  stage: integration-test
  services:
    - name: $AWS_CONTAINER_REGISTRY/harvester:$CI_COMMIT_SHA
      alias: harvester
    - name: $AWS_CONTAINER_REGISTRY/search-portal:$CI_COMMIT_SHA
      alias: service
    - name: docker:dind
    - name: postgres:12.2-alpine
    - name: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
      alias: elasticsearch
      command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
  extends: .docker-job
  variables:
    POL_ELASTIC_SEARCH_ENABLE_DECOMPOUND_ANALYZERS: 0
  script:
    - docker ps
    - cypress install
    - invoke srv.setup-postgres --host postgres
    - invoke hrv.setup-postgres --host postgres
    - invoke hrv.index-dataset-version localhost -d test
    - curl http://harvester:8888/
    - curl http://service:8000/health
    # TODO: we need Cypress to use service:8080 instead of localhost:8000
    # - APPLICATION_PROJECT=edusources invoke test.e2e

deploy:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "fako/gitlab-deploy"
      when: manual
    - if: $CI_COMMIT_BRANCH == "acceptance"
      when: manual
    - if: $CI_COMMIT_BRANCH == "edusources"
      when: manual
  extends: .docker-job
  script:
    - invoke aws.promote harvester --commit $CI_COMMIT_SHA
    - invoke aws.promote service --commit $CI_COMMIT_SHA
